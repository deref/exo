name: Create a release on VERSION update
on:
  push:
    branches:
      - main
    paths:
      - VERSION

jobs:
  test:
    name: Run all tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Perform tests
        run: go test ./...

  create-release-tag:
    name: Create release tag
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const version = fs.readFileSync('VERSION', 'utf8').trim();

            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${version}`,
              sha: context.sha
      - run: git tag ${{ steps.get_version.outputs.release_version }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: "gui/package-lock.json"
      - run: npm i -g npm@latest
      - run: npm ci
        working-directory: ./gui

      - name: Get version from VERSION file
        id: get_version
        run: echo ::set-output name=release_version::$(cat VERSION | tr -d '[:space:]')

        # FIXME: this will probably break the release as it will cause the
        # working directory to be dirty.
      - name: Output Amplitude API key
        run: echo -n "${{ secrets.AMPLITUDE_API_KEY }}" > AMPLITUDE_API_KEY

      - name: Run GoReleaser
        run: make release
        env:
          # Need a custom personal access token to allow publishing to
          # the deref/homebrew-tap repository.
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}


      - name: Update version in CloudFlare K/V
        uses: cloudflare/wrangler-action@1.3.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          publish: false
          preCommands: wrangler kv:key put --binding VERSIONS "exo" ${{ steps.get_version.outputs.release_version }}           })
