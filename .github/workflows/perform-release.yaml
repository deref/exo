name: Create a release on VERSION update
on:
  push:
    branches:
      - main
    paths:
      - VERSION

jobs:
  test:
    name: Run all tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Perform tests
        run: go test ./...

  create-release-tag:
    name: Create release tag
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const version = fs.readFileSync('VERSION', 'utf8').trim();

            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${version}`,
              sha: context.sha
            })

  create-release:
    name: Create a GH release from version tag
    runs-on: ubuntu-latest
    needs:
      - create-release-tag
    steps:
      - uses: actions/checkout@v2
      - name: Get version from VERSION file
        id: get_version
        run: |
          echo ::set-output name=release_version::$(cat VERSION | tr -d '[:space:]')
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.release_version }}
          release_name: Release ${{ steps.get_version.outputs.release_version }}
          draft: false
          prerelease: false
      - name: Output release URL file
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save release URL file for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  publish-binaries:
    runs-on: ubuntu-latest
    needs:
      - create-release
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: 15.x
      - run: npm ci
        working-directory: gui
      - run: npm run build
        working-directory: gui

      - name: Get version from VERSION file
        id: get_version
        run: echo ::set-output name=release_version::$(cat VERSION | tr -d '[:space:]')
      - name: Load release URL file from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Set environment variables
        env:
          REPOSITORY_NAME: ${{ github.repository }}
          ARTIFACT_DIR: ./artifacts
        run: |
          export BASE_NAME=${REPOSITORY_NAME##*/}
          export BINARY_NAME="${BASE_NAME}-${{ steps.get_version.outputs.release_version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          echo "binary_name=$BINARY_NAME" >> $GITHUB_ENV
          echo "artifact_dir=$ARTIFACT_DIR" >> $GITHUB_ENV
          echo "binary_path=${ARTIFACT_DIR}/${BINARY_NAME}" >> $GITHUB_ENV
      - name: Build
        run: |
          mkdir -p "${{ env.artifact_dir }}"
          go build  .
          docker run \
            -e GOOS=${{ matrix.goos }} \
            -e GOARCH=${{ matrix.goarch }} \
            --mount "type=bind,source=${PWD},target=/go/src/exo" \
            --mount "type=bind,source=${HOME}/go/pkg/mod,target=/go/pkg/mod" \
            -w /go/src/exo \
            ghcr.io/deref/golang-cross \
            go build \
              -tags bundle \
              -o "${{ env.binary_path }}" \
              .
          sha256sum "${{ env.binary_path }}" | cut -d ' ' -f 1 > "${{ env.binary_path }}.sha256"
      - name: Set upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ env.binary_path }}
          asset_name: ${{ env.binary_name }}
          asset_content_type: application/octet-stream
      - name: Upload release SHA256 hash
        id: upload-release-checksum
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ env.binary_path }}.sha256
          asset_name: ${{ env.binary_name }}.sha256
          asset_content_type: text/plain

  update-version:
    runs-on: ubuntu-latest
    needs:
      - publish-binaries
    steps:
      - uses: actions/checkout@v2
      - name: Get version from VERSION file
        id: get_version
        run: echo ::set-output name=release_version::$(cat VERSION | tr -d '[:space:]')
      - name: Update version in CloudFlare K/V
        uses: cloudflare/wrangler-action@1.3.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          publish: false
          preCommands: wrangler kv:key put --binding VERSIONS "exo" ${{ steps.get_version.outputs.release_version }}
