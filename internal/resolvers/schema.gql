type Query {
  allClusters: [Cluster!]!
  defaultCluster: Cluster
  clusterByRef(ref: String!): Cluster

  allProjects: [Project!]!
  projectById(id: String!): Project

  allWorkspaces: [Workspace!]!
  workspaceById(id: String!): Workspace
  workspaceByRef(ref: String!): Workspace

  allStacks: [Stack!]!
  stackById(id: String!): Stack
  stackByRef(ref: String!): Stack

  componentById(id: String!): Component
  componentByRef(ref: String!, stack: String): Component

  allResources: [Resource!]! # TODO: Paginate!
  resourceByIri(iri: String!): Resource
  
  tasksByJobId(jobId: String!): [Task!]!

  # For testing.
  sleep(seconds: Float!): Void
}

type Mutation {
  stopDaemon(): Void

  newProject(displayName: String): Project!
  newWorkspace(root: String!, projectID: String): Workspace!
  newStack(cluster: String, workspace: String, name: String): Stack!

  buildWorkspace(workspace: String!): Void
  refreshWorkspace(workspace: String!): Void
  startWorkspace(workspace: String!): Void
  restartWorkspace(workspace: String!): Void
  stopWorkspace(workspace: String!): Void

  buildWorkspaceComponents(workspace: String!, components: [String!]!): Void
  refreshWorkspaceComponents(workspace: String!, components: [String!]!): Void
  startWorkspaceComponents(workspace: String!, components: [String!]!): Void
  stopWorkspaceComponents(workspace: String!, components: [String!]!): Void
  restartWorkspaceComponents(workspace: String!, components: [String!]!): Void

  adoptResource(iri: String!, ownerType: String, workspace: String, component: String): Resource
  forgetResource(iri: String!): Void
  disposeResource(iri: String!): Void

  newTask(parentId: String, mutation: String!, variables: String!): Task!
  claimTask(taskId: String!, workerId: String!): Task!
  updateTask(id: String!, status: String, message: String, started: Instant, finished: Instant, progress: ProgressInput): Void
}

# ISO-8601 timestamp in UTC.
scalar Instant

type Void {}

type Cluster {
  id: String!
  name: String!
  default: Boolean!
}

type Project {
  id: String!
  displayName: String

  stacks: [Stack!]!

  resources: [Resource!]!
}

type Workspace {
  id: String!
  root: String!
  fileSystem: FileSystem!

  projectID: String!
  project: Project!

  stackId: String
  stack: Stack

  environment: Environment!

  resources: [Resource!]!
}

type Stack {
  id: String!
  name: String!

  clusterID: String!
  cluster: Cluster!

  projectID: String
  project: Project

  workspaceID: String
  workspace: Workspace

  resources: [Resource!]!
}

type Component {
  id: String!

  stackId: String!
  stack: Stack!

  name: String!

  resources: [Resource!]!
}

type Environment {
  variables: [Variable!]!
}

type Variable {
  name: String!
  value: String!
  source: String!
}

type Resource {
  iri: String!

  owner: ResourceOwner
  ownerType: String
  ownerId: String

  # Owner, if it is a project. Or the stack's project.
  project: Project
  # Owner, if it is a stack. Or the component's stack.
  stack: Stack
  # Owner, if it is a component.
  component: Component
}

union ResourceOwner = Component | Stack | Project

type FileSystem {
  file(path: String!): File
}

type File {
  name: String!
  path: String!
  isDirectory: Boolean!
  size: Float!
  content: String!
  children: [File!]!
}

type Task {
  id: String!
  jobId: String!
  job: Task!
  parentId: String
  parent: Task
  label: String!
  workerId: String
  status: String!
  created: Instant!
  updated: Instant!
  started: Instant
  finished: Instant
  progress: Progress
  message: String
}

type Progress {
  current: Int!
  total: Int!
  percent: Float!
}

input ProgressInput {
  current: Int!
  total: Int!
}
