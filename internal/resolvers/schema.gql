type Query {
  allProjects: [Project!]!
  projectById(id: String!): Project

  allWorkspaces: [Workspace!]!
  workspaceById(id: String!): Workspace
  workspaceByRef(ref: String!): Workspace

  stackById(id: String!): Stack

  componentById(id: String!): Component

  resourceByIri(iri: String!): Resource
}

type Mutation {
  newProject(displayName: String!): Project!
  newWorkspace(root: String!, projectID: String): Workspace!
}

type Project {
  id: String!
  displayName: String
}

type Workspace {
  id: String!
  root: String!

  projectID: String
  project: Project

  stackId: String
  stack: Stack

  environment: Environment!
}

type Stack {
  id: String!
}

type Component {
  id: String!

  stackId: String!
  stack: Stack!

  name: String!
}

type Environment {
  variables: [Variable!]!
}

type Variable {
  name: String!
  value: String!
  source: String!
}

type Resource {
  iri: String!

  componentId: String
  component: Component
}
