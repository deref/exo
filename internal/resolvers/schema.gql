type Query {
  allClusters: [Cluster!]!
  defaultCluster: Cluster
  clusterByRef(ref: String!): Cluster

  allProjects: [Project!]!
  projectById(id: String!): Project

  allWorkspaces: [Workspace!]!
  workspaceById(id: String!): Workspace
  workspaceByRef(ref: String!): Workspace

  allStacks: [Stack!]!
  stackById(id: String!): Stack
  stackByRef(ref: String!): Stack

  componentById(id: String!): Component

  allResources: [Resource!]! # TODO: Paginate!
  resourceByIri(iri: String!): Resource
}

type Mutation {
  stopDaemon(): Void

  newProject(displayName: String): Project!
  newWorkspace(root: String!, projectID: String): Workspace!
  newStack(cluster: String, workspace: String, name: String): Stack!

  buildWorkspace(workspace: String!): Job!
  refreshWorkspace(workspace: String!): Job!
  startWorkspace(workspace: String!): Job!
  restartWorkspace(workspace: String!): Job!
  stopWorkspace(workspace: String!): Job!

  buildWorkspaceComponents(workspace: String!, components: [String!]!): Job!
  refreshWorkspaceComponents(workspace: String!, components: [String!]!): Job!
  startWorkspaceComponents(workspace: String!, components: [String!]!): Job!
  stopWorkspaceComponents(workspace: String!, components: [String!]!): Job!
  restartWorkspaceComponents(workspace: String!, components: [String!]!): Job!
}

# Signals no useful result. Encoded as a JSON null value.
scalar Void

type Cluster {
  id: String!
  name: String!
  default: Boolean!
}

type Project {
  id: String!
  displayName: String

  stacks: [Stack!]!

  resources: [Resource!]!
}

type Workspace {
  id: String!
  root: String!
  fileSystem: FileSystem!

  projectID: String!
  project: Project!

  stackId: String
  stack: Stack

  environment: Environment!

  resources: [Resource!]!
}

type Stack {
  id: String!
  name: String!

  clusterID: String!
  cluster: Cluster!

  projectID: String
  project: Project

  workspaceID: String
  workspace: Workspace

  resources: [Resource!]!
}

type Component {
  id: String!

  stackId: String!
  stack: Stack!

  name: String!

  resources: [Resource!]!
}

type Environment {
  variables: [Variable!]!
}

type Variable {
  name: String!
  value: String!
  source: String!
}

type Resource {
  iri: String!

  componentId: String
  component: Component
}

type FileSystem {
  file(path: String!): File
}

type File {
  name: String!
  path: String!
  isDirectory: Boolean!
  size: Float!
  content: String!
  children: [File!]!
}

type Job {
  id: String!
}
