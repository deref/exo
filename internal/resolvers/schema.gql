type Query {
  system: System!

  findEntity(type: String!, id: String!): Entity

  routes: Routes!

  allClusters: [Cluster!]!
  defaultCluster: Cluster!
  clusterByRef(ref: String!): Cluster

  allTemplates: [Template!]!

  allProjects: [Project!]!
  projectById(id: String!): Project

  allWorkspaces: [Workspace!]!
  workspaceById(id: String!): Workspace
  workspaceByRef(ref: String!): Workspace

  # Returns a manifest that's not on disk.
  makeManifest(content: String!, format: String): Manifest!

  allStacks: [Stack!]!
  stackById(id: String!): Stack
  stackByRef(ref: String!): Stack

  componentById(id: String!): Component
  componentByRef(ref: String!, stack: String): Component

  allResources: [Resource!]! # TODO: Paginate!
  resourceById(id: String!): Resource
  resourceByRef(ref: String!): Resource

  allTasks: [Task!]!
  taskById(id: String!): Task
  tasksByJobId(jobId: String!): [Task!]!
  tasksByJobIds(jobIds: [String!]!): [Task!]!

  now: Instant!

  # Root file system of the local cluster.
  fileSystem: FileSystem!
}

type Mutation {
  stopDaemon: Void

  updateCluster(ref: String!, environment: JSONObject): Cluster!
  refreshCluster(ref: String!): Cluster!

  createProject(displayName: String): Project!

  createWorkspace(root: String!, projectId: String): Workspace!
  setWorkspaceStack(workspace: String!, stack: String): Stack
  destroyWorkspace(ref: String!): Reconciliation!

  formatManifest(workspace: String!, format: String, path: String): Void

  buildWorkspace(workspace: String!): Void
  refreshWorkspace(workspace: String!): Void
  startWorkspace(workspace: String!): Void
  restartWorkspace(workspace: String!): Void
  stopWorkspace(workspace: String!): Void

  buildWorkspaceComponents(workspace: String!, components: [String!]!): Void
  refreshWorkspaceComponents(workspace: String!, components: [String!]!): Void
  startWorkspaceComponents(workspace: String!, components: [String!]!): Void
  stopWorkspaceComponents(workspace: String!, components: [String!]!): Void
  restartWorkspaceComponents(workspace: String!, components: [String!]!): Void

  createResource(
    type: String!
    model: JSONObject!
    project: String
    stack: String
    component: String
    adopt: Boolean
  ): Resource!
  forgetResource(ref: String!): Void
  cancelResourceOperation(ref: String!): Resource!

  # These operations must be called asynchronously.
  # They take an exclusive lock on the resource.
  initializeResource(ref: String!, model: JSONObject!): Resource!
  refreshResource(ref: String!): Resource!
  updateResource(ref: String!, model: JSONObject!): Resource!
  disposeResource(ref: String!): Void

  createEvent(
    sourceType: String!
    sourceId: String!
    type: String!
    message: String!
  ): Event!

  # Create a job and its root task.
  createJob(mutation: String!, arguments: JSONObject!): Job!
  # Called during the execution of another task to create a subtask.
  createTask(mutation: String!, arguments: JSONObject!): Task!
  # Assigns an available task to the given worker.
  # Blocks until a task can be acquired. If jobId is specified, returns null
  # after the job has been completed.
  acquireTask(workerId: String!, jobId: String): Task
  startTask(id: String!, workerId: String!): Task!
  updateTask(id: String!, workerId: String!, progress: ProgressInput): Task!
  finishTask(id: String!, error: String): Void
  cancelJob(id: String!): Void
  cancelTask(id: String!): Void

  createStack(cluster: String, workspace: String, name: String): Stack!
  refreshStack(ref: String!): Reconciliation!
  destroyStack(ref: String!): Reconciliation!

  createComponent(
    stack: String!
    name: String!
    type: String!
    spec: String!
  ): Reconciliation!
  updateComponent(
    stack: String
    ref: String!
    newName: String
    newSpec: String
  ): Reconciliation!
  disposeComponent(stack: String, ref: String!): Reconciliation!
  disposeComponents(stack: String, refs: [String!]!): Reconciliation!

  reconcileComponent(stack: String, ref: String!): Void
  initializeComponent(id: String!): Void
  transitionComponent(id: String!, spec: String!): Void
  shutdownComponent(id: String!): Void

  # Debug/testing.
  sleep(seconds: Float!): Void
  busyWork(
    size: Int!
    depth: Int
    width: Int
    length: Int
    failRate: Float
  ): Void
}

type Subscription {
  # Always emits an initial JobWatched event, so that clients can get the full
  # job tree, even if no events have occured.
  watchJob(id: String!, after: ULID, debug: Boolean): Event!

  # TODO: events for cli logs.

  systemChange: System!

  # Debug/testing.
  tick(limit: Int): Instant!
}

# ISO-8601 timestamp in UTC.
scalar Instant

# TODO: Would this be better as a scalar?
type Void {
  # NOTE [EMPTY_GRAPHQL_TYPE]: Some old clients fail to parse empty types, So
  # include an arbitrary, meaningless, unused extra field here.  As a bonus,
  # this field prevents any other type from satisfying Void's interface.
  void: Void
}

type System {
  version: VersionInfo!
  stream: Stream!
}

type VersionInfo {
  installed: String!
  build: String!
  managed: Boolean!

  latest: String!
  # Like latest, but null if <=installed or if resolving fails.
  upgrade: String
}

interface Entity {
  id: String!
}

type Routes {
  root: String!
  newProjectUrl(workspace: String): String!
}

type Cluster {
  id: String!
  name: String!
  default: Boolean!
  environment: Environment!

  configuration(final: Boolean): String!
}

type Template {
  name: String!
  displayName: String!
  iconGlyph: String!
  url: String!
}

type Project {
  id: String!
  displayName: String

  stacks: [Stack!]!

  resources: [Resource!]!
}

type Workspace {
  id: String!
  url: String!
  root: String!
  displayName: String!
  # Scoped to workspace root.
  fileSystem: FileSystem!

  projectId: String!
  project: Project!

  stackId: String
  stack: Stack

  environment: Environment!

  components(all: Boolean, recursive: Boolean): [Component!]!
  resources: [Resource!]!

  # Configured active manifest.
  manifest: Manifest
  # Manifest file, which may or may not be active.
  findManifest(format: String): Manifest
}

type Manifest {
  format: String!
  file: File
  hostPath: String
  content: String!
  formatted: String!
}

type Stack {
  id: String!
  name: String!
  displayName: String!

  clusterId: String!
  cluster: Cluster!

  projectId: String
  project: Project

  workspaceId: String
  workspace: Workspace

  components(all: Boolean, recursive: Boolean): [Component!]!
  processes: [Process!]!
  resources: [Resource!]!

  configuration(recursive: Boolean, final: Boolean): String!

  environment: Environment!
}

type Component {
  id: String!

  stackId: String!
  stack: Stack!

  parentId: String
  parent: Component
  children: [Component!]!

  type: String!
  name: String!

  resources: [Resource!]!

  spec: String!
  configuration(recursive: Boolean, final: Boolean): String!

  reconciling: Boolean!
  running: Boolean!
  state: JSONObject!
  disposed: Instant
}

type Reconciliation {
  stack: Stack!
  # Non-null, if initiated on an individual component.
  component: Component
  job: Job!
}

type Process {
  id: String!
  name: String!
}

type Environment {
  asMap: JSONObject!
  variables: [Variable!]!
}

# TODO: Rename to EnvironmentVariable.
type Variable {
  name: String!
  value: String!
  source: String! # TODO: EnvironmentVariableSource union/interface.
}

type Resource {
  id: String!
  type: String!

  iri: String

  # Ownership hierarchy.
  projectId: String
  project: Project
  stackId: String
  stack: Stack
  componentId: String
  component: Component

  # Deepest available of component, stack, or project.
  owner: ResourceOwner

  # If non-null, task has a lock on resource and state will not be "idle".
  # TODO: Consider explicit Lock type.
  taskId: String
  task: Task
  operation: String # creating, adopting, refreshing, updating, or disposing.
  model: JSONObject!

  # HTTP error code from previous finished task.
  status: Int!
  # Error message from previous finished task.
  message: String
}

union ResourceOwner = Component | Stack | Project

type FileSystem {
  root: File!
  # If root file system for a particular user, gets home from OS.
  # Otherwise, uses the filesystem's root.
  homePath: String!
  file(path: String!): File
  # If path is not provided, defaults to homePath.
  fileOrHome(path: String): File
}

type File {
  name: String!
  # Path relative to root of filesystem.
  path: String!
  # Path to file on host machine.
  hostPath: String!
  isDirectory: Boolean!
  size: Float!
  content: String!
  parentPath: String
  children: [File!]!
}

type Job {
  # Same as root task ID.
  id: String!
  rootTask: Task!
  tasks: [Task!]!
  url: String!
  updated: Instant!
}

type Task {
  id: String!
  jobId: String!
  job: Job!
  parentId: String
  parent: Task
  children: [Task!]!
  mutation: String!
  arguments: JSONObject!
  # If non-null, unique within a mutation to allow for upserts.
  key: String
  label: String!
  workerId: String
  created: Instant!
  updated: Instant!
  # If null, task is queued.
  started: Instant
  # If not null, task will be interrupted and will soon become finished.
  canceled: Instant
  # When task has finished running, even if subtasks are not yet complete.
  finished: Instant
  # When this task and all its subtasks have finished.
  completed: Instant
  progress: Progress
  error: String
  message: String!
  successful: Boolean
}

type Progress {
  current: Int!
  total: Int!
  percent: Float!
}

input ProgressInput {
  current: Int!
  total: Int!
}

type Stream {
  sourceType: String!
  sourceId: String!
  source: StreamSource!
  events(cursor: ULID, prev: Int, next: Int, icontains: String): EventPage!
  # Message of the most recent event, or empty.
  message: String!
}

interface StreamSource {
  stream: Stream!
}

type EventPage {
  items: [Event!]!
  prevCursor: ULID!
  nextCursor: ULID!
}

type Event {
  id: String! # Untyped alias for ulid.
  ulid: ULID!
  timestamp: Instant! # Extracted from ulid.
  type: String!
  message: String!
  tags: JSONObject!

  # Event source hierarchy.
  sourceType: String!
  sourceId: String!
  source: StreamSource!
  stream: Stream!
  workspaceId: String
  workspace: Workspace
  stackId: String
  stack: Stack
  componentId: String
  component: Component
  jobId: String
  job: Job
  taskId: String
  task: Task
}

# See <https://github.com/ulid/spec>.
scalar ULID

# JSON Record<string, string>.
scalar Tags

scalar JSONObject
